# -*- coding: utf-8 -*-
"""coding implementation week 2task .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ov5irugV0-qTnK32cOhWCJI6TRYc8GHz
"""

import numpy as np
import pandas as pd

"""Generating random dataset"""

X=np.vstack([(np.random.rand(10,2)*5),(np.random.rand(10,2)*10)])
print(X)
y=np.random.randint(0,2,20)
y=y.reshape(20,1)
print(y)

"""Random dataset

"""

dataset=pd.DataFrame(X,columns=["x1" , "x2"])
dataset["y"]=y

y=np.random.randint(0,2,20)
y=y.reshape(20,1)
y

"""Dataset"""

dataset

"""one hot encoding"""

Z=np.zeros((20,2))
for i in range(20):
  Z[i,y[i]]=1

X.shape

"""initiating weight and bias"""

wi_1=np.random.randn(2,2)
bi_1=np.random.randn(2)
wi_2=np.random.randn(2,2)
bi_2=np.random.randn(2)

wi_1

bi_1

wi_2

bi_2

X

X.dot(wi_1.T)

"""forward propogation"""

def forward_prop(X,wi_1,bi_1,wi_2,bi_2):
  #first 
  M =1/(1+np.exp(-(X.dot(wi_1.T)+bi_1)))
  #second
  A=M.dot(wi_2)+bi_2
  expA=np.exp(A)
  Y=expA/expA.sum(axis=1,keepdims=True)
  return Y,M

forward_prop(X,wi_1,bi_1,wi_2,bi_2)



"""Backward propogation

"""

#hidden layer transpose 
#actual - predicted
def diff_wi_2(H,Z,Y):
  return H.T.dot(Z-Y)

#diff wrt to outer later weights
def diff_wi_1(X,H,Z,output,wi_2):
  dz=(Z-output).dot(wi_2.T)*H*(1-H)
  return H.T.dot(dz)

def diff_b2(Z,Y):
  return (Z-Y).sum(axis=0)

def diff_b1(Z,Y,wi_2,H):
  return ((Z-Y).dot(wi_2.T) * H * (1-H)).sum(axis=0)

learning_rate = 0.1
for epoch in range(4000):
  output,hidden=forward_prop(X,wi_1,bi_1,wi_2,bi_2)
  wi_2 += learning_rate * diff_wi_2(hidden,Z,output)
  bi_2 += learning_rate * diff_b2(Z,output)
  wi_1 += learning_rate * diff_wi_1(X,hidden,Z,output,wi_2).T
  bi_1 += learning_rate * diff_b1(Z,output,wi_2,hidden)

"""new predicting data point

"""

X_test=np.array([3,2])
hidden_output = 1 / (1+np.exp(-X_test.dot(wi_1.T) + bi_1))
outer= hidden_output.dot(wi_2) + bi_2
expA = np.exp(outer)
Y = expA / expA.sum()
print("prob class 0>>>> {} \n prob of class 1>>>> ({}) ".format(Y[0],Y[1]))



